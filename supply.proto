syntax = "proto3";

package ozon.whc.service.supply.v1;

option go_package = "gitlab.ozon.ru/whc/go/service/supply/pkg/api/supply/v1;v1";
option csharp_namespace = "Ozon.Whc.Go.Service.Supply.v1";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "gitlab.ozon.ru/whc/go/api/supply/api/constants/constants.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/type/money.proto";

service Supply {
    // Установить грузо-места и их состав для поставки
    rpc V1SetSupplyCargos (stream V1SetSupplyCargosRequest) returns (V1SetSupplyCargosResponse);
}

message V1SetSupplyCargosRequest {
    int64 supply_id = 1 [(validate.rules).int64.gt = 0]; // ID Поставки
    int64 cargo_id = 2 [(validate.rules).int64.gt = 0]; // ID грузо-места (XDock - lozon_id)
    string barcode = 3 [(validate.rules).string.min_len = 1]; // ШК грузо-места
    supply_constants.CargoType.Enum type = 4 [(validate.rules).enum = { in: [1, 2]}]; // Тип грузо-места (короб, паллета)
    repeated Item items = 5 [(validate.rules).repeated = {ignore_empty: true, min_items: 1, items: {message: {required: true}}}]; // Состав грузо-места (может быть пустым)

    message Item {
        int64 item_id = 1 [(validate.rules).int64.gt = 0]; // ID товара (sku, rezon_id)
        int32 quantity = 2 [(validate.rules).int32.gt = 0]; // кол-во (в шт)
        google.protobuf.Timestamp expiration_date = 3 [(validate.rules).timestamp.gt_now = true]; // Срок годности
    }
}

message V1SetSupplyCargosResponse {}